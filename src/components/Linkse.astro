---
import type { Linkservice } from "@/data/layout/links";
const {title, path, icon} = Astro.props as Linkservice;//Desestructuramos las propiedades title, path e icon de Astro.props utilizando la interfaz Linkservice.
import IcoChargeFail from "@/utilities/icons/icoChargeFail.astro";
import IcoMobileTurnOff from "@/utilities/icons/icoMobileTurnOff.astro";
import IcoScreenBroken from "@/utilities/icons/icoScreenBroken.astro";
import IcoScreenTouchFail from "@/utilities/icons/icoScreenTouchFail.astro";
---

<a href={path} class="hover:underline font-apple font-semibold flex flex-col items-center mx-auto my-auto md:mx-2 md:my-2 circular-gradient-bg text-xs transition-transform duration-300  hover:scale-custom2 cursor-pointer filter drop-shadow-lg">
    <slot name="before"/>
    
    {icon === 'IcoChargeFail' && <IcoChargeFail className="w-7 h-7  md:w-12 md:h-12  object-cover" />}
    {icon === 'IcoScreenBroken' && <IcoScreenBroken className="w-7 h-7  md:w-12 md:h-12  object-cover"  />}
    {icon === 'IcoScreenTouchFail' && <IcoScreenTouchFail className="w-7 h-7  md:w-12 md:h-12  object-cover"  />}
    {icon === 'IcoMobileTurnOff' && <IcoMobileTurnOff className="w-7 h-7  md:w-12 md:h-12  object-cover"  />}
        {title}      
    <slot name="after"/>  
    
</a>

<!-- Dentro del componente <a>, utilizamos expresiones condicionales para renderizar el componente de icono correspondiente según el valor de la propiedad icon. Utilizamos la sintaxis {icon === 'IcoChargeFail' && <IcoChargeFail />} para renderizar el componente <IcoChargeFail /> solo si el valor de icon es igual a 'IcoChargeFail'. Repetimos este patrón para cada componente de icono. -->

<style>
    .circular-gradient-bg{
        background-image: radial-gradient(circle, #1da1f2, #1da1f2);
        border-radius: 50%;
        width: 100px;
        height: 100px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
    }
</style>