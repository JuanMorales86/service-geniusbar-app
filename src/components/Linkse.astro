---
import type { Linkservice } from "@/data/layout/links";
const {title, path, icon} = Astro.props as Linkservice;//Desestructuramos las propiedades title, path e icon de Astro.props utilizando la interfaz Linkservice.
import IcoChargeFail from "@/utilities/icons/icoChargeFail.astro";
import IcoMobileTurnOff from "@/utilities/icons/icoMobileTurnOff.astro";
import IcoScreenBroken from "@/utilities/icons/icoScreenBroken.astro";
import IcoScreenTouchFail from "@/utilities/icons/icoScreenTouchFail.astro";

// interface Icons {
//     IcoChargeFail: typeof IcoChargeFail;
//     IcoScreenBroken: typeof IcoScreenBroken;
//     IcoMobileTurnOff: typeof IcoMobileTurnOff;
//     IcoScreenTouchFail: typeof IcoScreenTouchFail;
// }


// const icons: Icons = {
//     IcoChargeFail,
//     IcoScreenBroken,
//     IcoScreenTouchFail,
//     IcoMobileTurnOff,
// }

// const icons = { 
//     IcoChargeFail,
//     IcoScreenBroken,
//     IcoScreenTouchFail,
//     IcoMobileTurnOff,
// }; //Creamos un objeto icons que contiene los componentes de iconos importados, utilizando los mismos nombres que en src\data\layout\links.ts.


// const renderIcon = (iconName: string) => {
//     const Icon = icons[iconName as keyof typeof icons];
//     return Icon;
// }

---

<a href={path} class="hover:underline font-apple font-semibold flex flex-col items-center mx-2 my-2 circular-gradient-bg text-xs transition-transform duration-300  hover:scale-custom2 cursor-pointer filter drop-shadow-lg">
    <slot name="before"/>
    
    {icon === 'IcoChargeFail' && <IcoChargeFail wi="3rem" he="3rem" />}
    {icon === 'IcoScreenBroken' && <IcoScreenBroken wi="3rem" he="3rem"  />}
    {icon === 'IcoScreenTouchFail' && <IcoScreenTouchFail wi="3rem" he="3rem"  />}
    {icon === 'IcoMobileTurnOff' && <IcoMobileTurnOff wi="3rem" he="3rem"  />}
        {title}      
    <slot name="after"/>  
    
</a>

<!-- Dentro del componente <a>, utilizamos expresiones condicionales para renderizar el componente de icono correspondiente según el valor de la propiedad icon. Utilizamos la sintaxis {icon === 'IcoChargeFail' && <IcoChargeFail />} para renderizar el componente <IcoChargeFail /> solo si el valor de icon es igual a 'IcoChargeFail'. Repetimos este patrón para cada componente de icono. -->

<style>
    .circular-gradient-bg{
        background-image: radial-gradient(circle, #1da1f2, #1da1f2);
        border-radius: 50%;
        width: 100px;
        height: 100px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
    }
</style>